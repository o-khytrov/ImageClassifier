@page "/"
@using SixLabors.ImageSharp.PixelFormats
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats.Png
@using SixLabors.Fonts
@using System.Diagnostics
@using SixLabors.ImageSharp.Drawing
@using SixLabors.ImageSharp.Drawing.Processing
@using SixLabors.ImageSharp.Processing
@inject IJSRuntime JsRuntime
<div class="slidecontainer">
    <label for="delta">Frame size @FrameSize</label>
    <input type="range" step="25" min="25" max="100" class="slider" id="frameSize" @bind="@FrameSize">
</div>
<input class="mb-2" type="file" id="addMap" onchange="addMap(this)">
<div>
    <button class="btn btn-primary" @onclick="Classify">Classify</button>
    <table>
        <thead>
        <tr>
            <th>Клас</th>
            <th>Зображення</th>
            <th>Опції</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var rc in RecognitionClasses)
        {
            <tr>
                <td>
                    Recognition class @(RecognitionClasses.IndexOf(rc))
                </td>
                <td>
                    <img src="@rc.DataUrl" style="width:@(FrameSize * 2)px; height:@(FrameSize * 2)px"/>
                </td>
                <td>
                    <button class="btn bg-danger" @onclick="() => DeleteRecognitionClass(rc)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>
<div id="map_container">
    <canvas id="source"></canvas>
</div>
@if (!string.IsNullOrWhiteSpace(ResultBase64))
{
    <div>
        <img src="@ResultBase64"/>
    </div>
}


@code{

    private int FrameSize { get; set; } = 50;

    private List<RecognitionClass> RecognitionClasses { get; set; } = new();

    private string ResultBase64 { get; set; }

    private Image<Rgba32>? BaseImage;
    private Font _font;

    protected override void OnInitialized()
    {
    //var resourceName = $"{Assembly.GetExecutingAssembly().GetName().Name}.Fonts.OpenSans-Regular.ttf";
    //var fontStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceName);
    //var family = collection.Add(fontStream);
    //_font = family.CreateFont(12, FontStyle.Italic);

        JsService.ImageAreaSelected += AddRecognitionClass;
        JsService.SourceImageSelected += SetBaseImage;
    }

    private void SetBaseImage(ImageData imageData)
    {
        BaseImage = Image.LoadPixelData<Rgba32>(imageData.Data, imageData.Width, imageData.Height);
    }

    private void AddRecognitionClass(ImageData imageData)
    {
        var image = Image.LoadPixelData<Rgba32>(imageData.Data, imageData.Width, imageData.Height);

        var recognitionClass = new RecognitionClass(image)
        {
            DataUrl = image.ToBase64String(PngFormat.Instance)
        };


        RecognitionClasses.Add(recognitionClass);
        StateHasChanged();
    }


    private void DeleteRecognitionClass(RecognitionClass recognitionClass)
    {
        RecognitionClasses.Remove(recognitionClass);
    }


    private void Classify()
    {
       
        var brushes = new List<IBrush>
        {
            Brushes.Solid(Color.Blue.WithAlpha(0.35f)),
            Brushes.Solid(Color.Orange.WithAlpha(0.35f)),
            Brushes.Solid(Color.Red.WithAlpha(0.35f)),
            Brushes.Solid(Color.Black.WithAlpha(0.35f)),
        };

        var classifier = new Classifier();
        classifier.Setup(RecognitionClasses.Select(x => x.Image).ToList(), FrameSize);

        Console.WriteLine("setup completed");

        if (BaseImage is not null)
        {
            var predictions = classifier.ClassifyImage(BaseImage);

            Console.WriteLine("Predictions made");

            Image image = BaseImage.Clone();
            foreach (var prediction in predictions)
            {
                StateHasChanged();  
                if (prediction.Class > -1)
                {
                    var yourPolygon = new Rectangle(prediction.X, prediction.Y, FrameSize, FrameSize);
                    image.Mutate(x => x.Fill(brushes[prediction.Class], yourPolygon));
                }
            }

            ResultBase64 = image.ToBase64String(PngFormat.Instance);
            StateHasChanged();
        }
    }

}