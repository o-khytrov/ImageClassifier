@page "/"
@using SixLabors.ImageSharp.PixelFormats
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats.Png
@using SixLabors.Fonts
@using SixLabors.ImageSharp.Drawing.Processing
@using SixLabors.ImageSharp.Processing
@inject IJSRuntime JsRuntime

<div class="slidecontainer">
    <label for="delta">Frame size @FrameSize</label>
    <input type="range" step="25" min="25" max="100" class="slider" id="frameSize" @bind="@FrameSize">
</div>
<input class="mb-2" type="file" id="addMap" onchange="addMap(this)">
<div>

    <button class="btn btn-primary" @onclick="Classify">Classify</button>
    <div class="progress">
        <div class="progress-bar" role="progressbar" aria-valuenow="@CurrentProgress" aria-valuemin="0" aria-valuemax="@PredictionsCount"></div>
    </div>
    <table>
        <thead>
        <tr>
            <th>Клас</th>
            <th>Зображення</th>
            <th>Колір</th>
            <th>Опції</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var rc in RecognitionClasses)
        {
            <tr>
                <td>
                    <input type="text" @bind="@rc.Name"/>
                </td>
                <td>
                    <input type="color" name="favcolor" @bind="@rc.Color"/>
                    <label>@rc.Color</label>
                </td>
                <td>
                    <img src="@rc.DataUrl" style="width:@(FrameSize * 2)px; height:@(FrameSize * 2)px"/>
                </td>
                <td>
                    <button class="btn bg-danger" @onclick="() => DeleteRecognitionClass(rc)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>
<div id="map_container">
    <canvas id="source"></canvas>
</div>
@if (!string.IsNullOrWhiteSpace(ResultBase64))
{
    <div>
        <img src="@ResultBase64"/>
    </div>
}


@code{

    private static readonly List<string> _colors = new()
    {
        "#38e819", "#1a4ca5", "#47a7e1", "#859b61", "#9d0f52", "#b8dc63", "#5ff930", "#21c424", "#c0a9eb"
    };

    private int FrameSize { get; set; } = 50;

    private List<RecognitionClass> RecognitionClasses { get; set; } = new();

    private string ResultBase64 { get; set; }

    private Image<Rgba32>? BaseImage;
    private Font _font;

    private int CurrentProgress { get; set; }


    private int PredictionsCount { get; set; }

    protected override void OnInitialized()
    {
    //var resourceName = $"{Assembly.GetExecutingAssembly().GetName().Name}.Fonts.OpenSans-Regular.ttf";
    //var fontStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceName);
    //var family = collection.Add(fontStream);
    //_font = family.CreateFont(12, FontStyle.Italic);

        JsService.ImageAreaSelected += AddRecognitionClass;
        JsService.SourceImageSelected += SetBaseImage;
    }

    private void SetBaseImage(ImageData imageData)
    {
        BaseImage = Image.LoadPixelData<Rgba32>(imageData.Data, imageData.Width, imageData.Height);
    }

    private string GetNextColor(int index)
    {
        return "#" + Color.WebSafePalette.Slice(index, 1).ToArray()[0].ToHex().ToLower();
    }

    private void AddRecognitionClass(ImageData imageData)
    {
        var image = Image.LoadPixelData<Rgba32>(imageData.Data, imageData.Width, imageData.Height);

        var recognitionClass = new RecognitionClass(image)
        {
            Name = $"Class {RecognitionClasses.Count}"
            DataUrl = image.ToBase64String(PngFormat.Instance),
            Color = _colors[RecognitionClasses.Count]
        };

        RecognitionClasses.Add(recognitionClass);
        StateHasChanged();
    }


    private void DeleteRecognitionClass(RecognitionClass recognitionClass)
    {
        RecognitionClasses.Remove(recognitionClass);
    }


    private void Classify()
    {
        var brushes = RecognitionClasses.Select(x => Brushes.Solid(Color.ParseHex(x.Color).WithAlpha(0.35f))).ToList();

        var classifier = new Classifier();
        classifier.Setup(RecognitionClasses.Select(x => x.Image).ToList(), FrameSize);

        Console.WriteLine("setup completed");

        if (BaseImage is not null)
        {
            var predictions = classifier.ClassifyImage(BaseImage);
            PredictionsCount = predictions.Count;

            Console.WriteLine("Predictions made");

            Image image = BaseImage.Clone();
            foreach (var prediction in predictions)
            {
                StateHasChanged();
                if (prediction.Class > -1)
                {
                    var yourPolygon = new Rectangle(prediction.X, prediction.Y, FrameSize, FrameSize);
                    image.Mutate(x => x.Fill(brushes[prediction.Class], yourPolygon));
                    CurrentProgress++;
                    StateHasChanged();
                }
            }

            ResultBase64 = image.ToBase64String(PngFormat.Instance);
            StateHasChanged();
        }
    }

}